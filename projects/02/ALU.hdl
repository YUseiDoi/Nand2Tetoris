// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Not16(in=x, out=outnotx);
    And16(a=x, b=outnotx, out=outandx);
    Mux16(a=x, b=outnotx, sel=zx, out=outmuxzx);
    Mux16(a=outmuxzx, b=outandx, sel=nx, out=outmuxnx);
    Not16(in=y, out=outnoty);
    And16(a=y, b=outnoty, out=outandy);
    Mux16(a=y, b=outnoty, sel=zy, out=outmuxzy);
    Mux16(a=outmuxzy, b=outandy, sel=ny, out=outmuxny);
    Or16(a=x, b=y, out=outorxy);
    And16(a=x, b=y, out=outandxy);
    Mux16(a=outoandy, b=outorxy, sel=f, out=outmuxf);
    Not16(in=outmuxf, out=outnotout);
    Mux16(a=outmuxf, b=outnotout, sel=no, out=outmuxno);
    And(a=outmuxno[0], b=outmuxno[0], out=ng);
    Or(a=outmuxno[0], b=outmuxno[1], out=outmuxnoor1);
    Or(a=outmuxnoor1, b=outmuxno[2], out=outmuxnoor2);
    Or(a=outmuxnoor2, b=outmuxno[3], out=outmuxnoor3);
    Or(a=outmuxnoor3, b=outmuxno[4], out=outmuxnoor4);
    Or(a=outmuxnoor4, b=outmuxno[5], out=outmuxnoor5);
    Or(a=outmuxnoor5, b=outmuxno[6], out=outmuxnoor6);
    Or(a=outmuxnoor6, b=outmuxno[7], out=outmuxnoor7);
    Or(a=outmuxnoor7, b=outmuxno[8], out=outmuxnoor8);
    Or(a=outmuxnoor8, b=outmuxno[9], out=outmuxnoor9);
    Or(a=outmuxnoor9, b=outmuxno[10], out=outmuxnoor10);
    Or(a=outmuxnoor10, b=outmuxno[11], out=outmuxnoor11);
    Or(a=outmuxnoor11, b=outmuxno[12], out=outmuxnoor12);
    Or(a=outmuxnoor12, b=outmuxno[13], out=outmuxnoor13);
    Or(a=outmuxnoor13, b=outmuxno[14], out=outmuxnoor14);
    Or(a=outmuxnoor14, b=outmuxno[15], out=zr);
    And16(a=outmuxno, b=outmuxno, out=out);
}